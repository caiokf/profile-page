{"version":3,"sources":["styleguide/colors.js","styleguide/dimensions.js","styleguide/typography.js","styleguide/media.js","styleguide/index.js","components/Header.js","components/Profiles.js","components/Education.js","components/WorkExperience.js","App.js","styleguide/global.js","serviceWorker.js","index.js"],"names":["white","platinum","dustyGray","codGray","black","yankeesBlue","carrotOrange","highlightYellow","red","xl","lg","md","sm","xs","maxWidth","regular","colors","jumbo","header","dimensions","label","small","sizes","queries","phone","tablet","desktop","typography","media","css","console","log","resume","className","Avatar","photo","basics","picture","Name","name","Headline","summary","Header","styled","styles","div","props","Container","profiles","map","x","Profile","href","url","target","Icon","src","icon","color","iconColor","Network","network","a","img","education","institution","area","studyType","startDate","endDate","work","Experience","Position","position","Company","website","company","Summary","Highlights","highlights","h","Technologies","TechLabel","TechStack","technologies","span","ExperienceSection","ProfileContainer","Body","Main","RightSidebar","createGlobalStyle","Boolean","window","location","hostname","match","ReactDOM","render","Fragment","WorkExperience","Education","Profiles","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dfad7647.chunk.js","sourcesContent":["export default {\n  // grayscale\n  white: '#ffffff',\n  platinum: '#e5e5e5',\n  dustyGray: '#5E747F',\n  codGray: '#333333',\n  black: '#000000',\n\n  // colors and accents\n  yankeesBlue: '#00558B',\n  carrotOrange: '#F09B1A',\n  highlightYellow: '#fdf2b2',\n  red: '#f27474',\n}\n","export default {\n  xl: '80px',\n  lg: '40px',\n  md: '20px',\n  sm: '10px',\n  xs: '5px',\n\n  maxWidth: '1024px',\n}\n","import colors from './colors'\nimport dimensions from './dimensions'\n\nconst regular = `\n  font-family: 'Montserrat', sans-serif;\n  font-size: 16px;\n  line-height: 20px;\n  color: ${colors.codGray};\n`\nexport default {\n  jumbo: regular + `\n    font-size: 48px;\n    line-height: 60px;\n    font-weight: 700;\n    color: ${colors.yankeesBlue};\n  `,\n\n  header: regular + `\n    font-size: 22px;\n    line-height: 24px;\n    font-weight: 600;\n    color: ${colors.yankeesBlue};\n    text-transform: uppercase;\n    padding-bottom: ${dimensions.sm};\n    margin-bottom: ${dimensions.sm};\n  `,\n\n  regular,\n  \n  label: regular + `\n    font-size: 14px;\n    opacity: .8;\n    line-height: 18px;\n    font-weight: 400;\n    color: ${colors.dustyGray};\n  `,\n\n  small: regular + `\n    font-size: 14px;\n    line-height: 18px;\n    margin: 5px 0px;\n    font-weight: 400;\n  `,\n}\n","import React, { Component } from 'react'\nimport { css } from 'styled-components'\n\nconst sizes = {\n  tablet: 768,\n  phone: 414,\n}\n\nconst queries = {\n  phone: `(max-width: ${sizes.phone}px)`,\n  tablet: `(max-width: ${sizes.tablet}px) and (min-width: ${sizes.phone + 1}px)`,\n  desktop: `(min-width: ${sizes.tablet + 1}px)`,\n}\n\n// Iterate through the sizes and create a media template\nconst media = {\n  phone: (...args) => css`\n    @media ${queries.phone} {\n      ${css(...args)}\n    }\n  `,\n  tablet: (...args) => css`\n    @media ${queries.tablet} {\n      ${css(...args)}\n    }\n  `,\n  desktop: (...args) => css`\n    @media ${queries.desktop} {\n      ${css(...args)}\n    }\n  `,\n}\n\nexport default media\n","import colors from './colors'\nimport dimensions from './dimensions'\nimport typography from './typography'\nimport media from './media'\n\nexport default {\n  colors,\n  typography,\n  dimensions,\n  media,\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport styles from '../styleguide'\nimport resume from '../resume.json'\n\nexport default () => {\n  console.log(resume)\n\n  return (\n    <Header className=\"profile-bio\">\n      <div>\n        <Avatar photo={resume.basics.picture} />\n      </div>\n\n      <div>\n        <Name className=\"name\">{resume.basics.name}</Name>\n        <Headline className=\"headline\">{resume.basics.label}</Headline>\n        <div className=\"summary\">{resume.basics.summary}</div>\n      </div>\n    </Header>\n  )\n}\n\nconst Header = styled.header`\n  display: flex;\n  padding-bottom: ${styles.dimensions.lg};\n  border-bottom: 1px solid ${styles.colors.platinum};\n  margin-bottom: ${styles.dimensions.lg};\n`\nconst Avatar = styled.div`\n  background-image: url(${props => props.photo});\n  background-size: cover;\n  background-position: center;\n  height: 200px;\n  width: 200px;\n  margin-right: ${styles.dimensions.md};\n  border-radius: 5px;\n`\nconst Name = styled.div`\n  ${styles.typography.jumbo};\n`\nconst Headline = styled.div`\n  ${styles.typography.label};\n  margin-bottom: ${styles.dimensions.md};\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport styles from '../styleguide'\nimport resume from '../resume.json'\n\nexport default () => {\n  return (\n    <Container className=\"profile-links\">\n      <Header>Find me Online</Header>\n\n      {resume.basics.profiles.map(x => {\n        return (\n          <Profile href={x.url} target=\"_blank\">\n            <Icon src={x.icon} color={x.iconColor} />\n            <Network>{x.network}</Network>\n          </Profile>\n        )\n      })}\n    </Container>\n  )\n}\n\nconst Container = styled.header`\n  display: flex;\n  flex-direction: column;\n  margin: 0 {styles.dimensions.md};\n`\nconst Header = styled.div`\n  ${styles.typography.header};\n`\nconst Profile = styled.a`\n  display: flex;\n  align-items: center;\n  text-decoration: none;\n  ${styles.typography.regular};\n\n  &:visited {\n    ${styles.typography.regular};\n  }\n`\nconst Icon = styled.img`\n  height: 20px;\n  width: 20px;\n  margin: ${styles.dimensions.xs} ${styles.dimensions.sm} ${styles.dimensions.xs} 0;\n`\nconst Network = styled.div`\n  ${styles.typography.small};\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport styles from '../styleguide'\nimport resume from '../resume.json'\n\nexport default () => {\n  return (\n    <Container className=\"education-container\">\n      {resume.education.map(x => {\n        return (\n          <div>\n            <Header>Education</Header>\n\n            <div className=\"education-institution\">\n              {x.institution}\n            </div>\n\n            <div className=\"education-course\">\n              {x.area}\n            </div>\n\n            <div className=\"education-degree\">\n              {x.studyType}\n            </div>\n\n            <div className=\"education-start\">\n              {x.startDate}\n            </div>\n\n            <div className=\"education-end\">\n              {x.endDate}\n            </div>\n          </div>\n        )\n      })}\n    </Container>\n  )\n}\n\nconst Container = styled.div`\n  margin-bottom: ${styles.dimensions.lg};\n`\nconst Header = styled.div`\n  ${styles.typography.header};\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport styles from '../styleguide'\nimport resume from '../resume.json'\n\nexport default () => {\n  return (\n    <Container className=\"work-container\">\n      <Header>Work Experience</Header>\n\n      {resume.work.map(x => {\n        return (\n          <Experience>\n            <Position className=\"work-position\">{x.position}</Position>\n            @\n            <Company href={x.website || '#'} target=\"_blank\" className=\"work-company\">{x.company}</Company>\n            <Summary>{x.summary}</Summary>\n            <Highlights>\n              {x.highlights && x.highlights.map(h => {\n                return (\n                  <div>- {h}</div>\n                )\n              })}\n            </Highlights>\n            <Technologies>\n              <TechLabel>Technologies: </TechLabel>\n              <TechStack>{x.technologies}</TechStack>\n            </Technologies>\n          </Experience>\n        )\n      })}\n    </Container>\n  )\n}\n\nconst Container = styled.div`\n  margin-right: ${styles.dimensions.lg};\n`\nconst Header = styled.div`\n  ${styles.typography.header};\n`\nconst Experience = styled.div`\n  padding: ${styles.dimensions.md};\n  border: 1px solid ${styles.colors.platinum};\n  margin-bottom: ${styles.dimensions.md};\n\n`\nconst Position = styled.span`\n  margin-right: ${styles.dimensions.sm};\n  font-weight: 700;\n`\nconst Company = styled.a`\n  margin-left: ${styles.dimensions.sm};\n`\nconst ExperienceSection = styled.div`\n  margin-left: ${styles.dimensions.sm};\n  margin-bottom: ${styles.dimensions.sm};\n  ${styles.typography.label};\n`\nconst Summary = styled(ExperienceSection)`\n  margin-top: ${styles.dimensions.sm};\n  text-align: justify;\n`\nconst Highlights = styled(ExperienceSection)``\nconst Technologies = styled(ExperienceSection)`\n  margin-bottom: 0;\n`\nconst TechLabel = styled.span`\n  color: ${styles.colors.codGray};\n  font-weight: 500;\n`\nconst TechStack = styled.span`\n\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport styles from './styleguide'\nimport Header from './components/Header'\nimport Profiles from './components/Profiles'\nimport Education from './components/Education'\nimport WorkExperience from './components/WorkExperience'\n\nexport default () => {\n  return (\n    <Profile className=\"profile\">\n      <ProfileContainer className=\"profile-container\">\n        <Header />\n        <Body>\n          <Main>\n            <WorkExperience />\n          </Main>\n\n          <RightSidebar>\n            <Education />\n            <Profiles />\n          </RightSidebar>\n        </Body>\n      </ProfileContainer>\n    </Profile>\n  )\n}\n\nconst Profile = styled.div`\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n`\nconst ProfileContainer = styled.div`\n  width: ${styles.dimensions.maxWidth};\n  padding: ${styles.dimensions.lg} 0;\n  display: flex;\n  flex-direction: column;\n`\nconst Body = styled.div`\n  display: flex;\n  flex: 1;\n`\nconst Main = styled.div`\n  display: flex;\n  flex: 1;\n`\nconst RightSidebar = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n","import { createGlobalStyle } from 'styled-components'\nimport typography from './typography'\n\nexport default createGlobalStyle`\n  body {\n    margin: 0;\n    ${typography.regular};\n  }\n\n  a {\n    text-decoration: none;\n    \n    ${typography.regular};\n\n    &:visited {\n      ${typography.regular};\n    }\n\n    &:hover {\n      opacity: 0.7;\n    }\n  }\n`\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport GlobalStyles from './styleguide/global'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.Fragment>\n    <GlobalStyles />\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}